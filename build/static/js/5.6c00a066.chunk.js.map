{"version":3,"sources":["redux/products/products-selectors.js","components/Notification/Notification.jsx","components/Notification/Notification.module.css","redux/products/products-operations.js","components/Logo/Logo.jsx","components/Logo/Logo.module.css","pages/ProductPage/ProductPage.js"],"names":["selectors","getLoading","state","products","loading","getAllProducts","getAllPages","page","getError","error","Notification","message","dispatch","useDispatch","errorAuth","useSelector","authSelectors","clearErrorAuth","useCallback","authActions","clearError","useEffect","setTimeout","in","timeout","classNames","s","unmountOnExit","className","overlay","module","exports","BaseURL","operations","fetchProducts","getState","a","persistedToken","auth","token","AxiosToken","set","fetchProductsRequest","axios","get","data","fetchProductsSuccess","fetchProductsError","Logo","logo","ProductPage"],"mappings":"4GAEA,IAsCMA,EAAY,CACdC,WAvCe,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SA0CvCC,eAtCmB,SAAAH,GAAK,OAAIA,EAAMC,SAASA,UAuC3CG,YAlCgB,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,MAmCxCC,SArCa,SAAAN,GAAK,OAAIA,EAAMC,SAASM,QAyC1BT,O,wJCzCA,SAASU,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QAC9BC,EAAWC,cAEXC,GADUC,YAAYf,IAAUQ,UACpBO,YAAYC,IAAcR,WAEtCS,EAAiBC,uBAAY,kBAAMN,EAASO,IAAYC,gBAAe,CAACR,IAgB9E,OAbAS,qBAAU,WACPC,YAAW,WACRL,MACA,QACH,CAACH,EAAWG,IAUZ,cAAC,IAAD,CACGM,GAAIZ,EACJa,QAAS,IACTC,WAAYC,IACZC,eAAa,EAJhB,SAMG,qBAAKC,UAAWF,IAAEG,QAAlB,SACG,mBAAGD,UAAWF,IAAEf,QAAhB,SACIA,U,oBCtChBmB,EAAOC,QAAU,CAAC,QAAU,8BAA8B,QAAU,8BAA8B,MAAQ,4BAA4B,YAAc,kCAAkC,KAAO,2BAA2B,WAAa,mC,+FCYrOC,cAEA,IA4CMC,EAAa,CACfC,cA7CkB,eAAC3B,EAAD,uDAAQ,EAAR,8CAAc,WAAOK,EAAUuB,GAAjB,qBAAAC,EAAA,2DAG5BD,IADeE,EAFa,EAE5BC,KAAQC,MAFoB,wDAShCC,cAAaC,IAAIJ,GACjBzB,EAAS8B,eAVuB,kBAYLC,IAAMC,IAAN,6BAAgCrC,IAZ3B,gBAYpBsC,EAZoB,EAYpBA,KACRL,cAAaC,IAAII,EAAKN,OACtB3B,EAASkC,YAAqBD,IAdF,kDAiB5BjC,EAASmC,YAAmB,KAAMpC,UAjBN,0DAAd,0DAiDPsB,O,qECrDAe,IARF,WAEV,OACG,oBAAIpB,UAAWF,IAAEuB,KAAjB,wB,oBCLNnB,EAAOC,QAAU,CAAC,KAAO,qB,kJCaV,SAASmB,IACJnC,YAAYf,IAAUK,gBAGtBQ,cAMHE,YAAYf,IAAUQ,UACpC,OACG","file":"static/js/5.6c00a066.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state => state.products.loading;\n\n//const getFilter = state => state.products.filter;\n\nconst getAllProducts = state => state.products.products;\n\n\nconst getError = state => state.products.error;\n\nconst getAllPages = state => state.products.page\n\n\n//const getErrorRefToken = state => state.products.refreshTokenError;\n\n//Без мемоизации\n// const getVisibleContacts = state => {\n//     const contacts = getAllContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(({ name }) =>\n//         name.toLowerCase().includes(normalizedFilter),\n//     );\n// };\n\n//С мемоизацией\n/*\nconst getVisibleProducts = createSelector(\n    [getAllProducts, getFilter],\n    (products, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n\n        return products.filter(({ title }) =>\n            title.toLowerCase().includes(normalizedFilter),\n        );\n    },\n);\n*/\nconst selectors = {\n    getLoading,\n    //getFilter,\n    //getVisibleProducts,\n    getAllProducts,\n    getAllPages,\n    getError,\n    // getErrorRefToken\n};\n\nexport default selectors;","import React, { useEffect, useCallback } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport * as productsActions from '../../redux/products/products-actions';\r\nimport selectors from '../../redux/products/products-selectors';\r\nimport authSelectors from '../../redux/auth/auth-selectors';\r\nimport authActions from '../../redux/auth/auth-actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport s from './Notification.module.css';\r\n\r\nexport default function Notification({ message }) {\r\n   const dispatch = useDispatch();\r\n   const errorPb = useSelector(selectors.getError);\r\n   const errorAuth = useSelector(authSelectors.getError);\r\n   //const clearErrorPb = useCallback(() => dispatch(productsActions.clearError()), [dispatch]);\r\n   const clearErrorAuth = useCallback(() => dispatch(authActions.clearError()), [dispatch]);\r\n\r\n\r\n   useEffect(() => {\r\n      setTimeout(() => {\r\n         clearErrorAuth();\r\n      }, 2500);\r\n   }, [errorAuth, clearErrorAuth]);\r\n\r\n   /*\r\n      useEffect(() => {\r\n         setTimeout(() => {\r\n            clearErrorPb();\r\n         }, 2500);\r\n      }, [errorPb, clearErrorPb]);\r\n   */\r\n   return (\r\n      <CSSTransition\r\n         in={message}\r\n         timeout={250}\r\n         classNames={s}\r\n         unmountOnExit\r\n      >\r\n         <div className={s.overlay} >\r\n            <p className={s.message}>\r\n               {message}\r\n            </p>\r\n         </div>\r\n      </CSSTransition>\r\n   );\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Notification_overlay__25sWX\",\"message\":\"Notification_message__Qx2_p\",\"enter\":\"Notification_enter__1cwAv\",\"enterActive\":\"Notification_enterActive__4XaJn\",\"exit\":\"Notification_exit__1Nbxi\",\"exitActive\":\"Notification_exitActive__XLBCH\"};","import axios from 'axios';\nimport { AxiosToken, BaseURL } from '../../Api/AxiosToken';\nimport {\n    fetchProductsRequest,\n    fetchProductsSuccess,\n    fetchProductsError,\n    fetchProductsPageRequest,\n    fetchProductsPageSuccess,\n    fetchProductsPageError,\n} from './products-actions';\n\n\n\nBaseURL();\n\nconst fetchProducts = (page = 1) => async (dispatch, getState) => {\n    const {\n        auth: { token: persistedToken },\n    } = getState();\n\n    if (!persistedToken) {\n        return;\n    }\n\n    AxiosToken().set(persistedToken);\n    dispatch(fetchProductsRequest());\n    try {\n        const { data } = await axios.get(`/api/products?page=${page}`);\n        AxiosToken().set(data.token);\n        dispatch(fetchProductsSuccess(data));\n    }\n    catch (error) {\n        dispatch(fetchProductsError(error.message))\n    }\n};\n/*\nconst fetchProductsPage = () => async (dispatch, getState) => {\n    const {\n        auth: { token: persistedToken },\n        page\n    } = getState();\n\n    if (!persistedToken) {\n        return;\n    }\n\n    AxiosToken().set(persistedToken);\n    dispatch(fetchProductsPageRequest());\n    try {\n        const { data } = await axios.get(`/api/products?page=${page}`);\n        AxiosToken().set(data.token);\n        dispatch(fetchProductsPageSuccess(data));\n    }\n    catch (error) {\n        dispatch(fetchProductsPageError(error.message))\n    }\n};*/\n\n\nconst operations = {\n    fetchProducts,\n    //fetchProductsPage\n};\n\nexport default operations;","import React from 'react';\r\nimport s from './Logo.module.css';\r\n\r\nconst Logo = () => {\r\n\r\n   return (\r\n      <h1 className={s.logo}>Products</h1>\r\n   )\r\n\r\n}\r\n\r\nexport default Logo;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__36VSw\"};","import React, { useEffect } from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n//import ContactForm from '../components/ContactForm/ContactForm';\r\n//import Filter from '../components/Filter/Filter';\r\nimport Product from '../../components/Product/Product';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Logo from '../../components/Logo/Logo';\r\nimport operations from '../../redux/products/products-operations';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport Notification from '../../components/Notification/Notification';\r\nimport selectors from '../../redux/products/products-selectors';\r\n\r\nexport default function ProductPage() {\r\n   const products = useSelector(selectors.getAllProducts);\r\n   //const isLoadingProducts = useSelector(selectors.getLoading);\r\n\r\n   const dispatch = useDispatch();\r\n   /*\r\n      useEffect(() => {\r\n         dispatch(operations.singleProduct());\r\n      }, [dispatch]);*/\r\n\r\n   const error = useSelector(selectors.getError);\r\n   return (\r\n      <h1>Nfdkfdl</h1>\r\n   );\r\n};\r\n"],"sourceRoot":""}